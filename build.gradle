buildscript {
    ext.kotlin_version = '1.9.22'
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'kotlin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {

            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

//mixin {
//    add sourceSets.main, "${mod_id}.refmap.json"
//
//    config "${mod_id}.mixins.json"
//}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://repo.essential.gg/repository/maven-public"
    }
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/jcenter' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven {
        url "https://maven.minecraftforge.net/"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://api.modrinth.com/maven"
        name = "Modrinth"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org"
    }
    maven {
        name = "Valkyrien Skies Internal"
        url = 'https://maven.valkyrienskies.org'
        allowInsecureProtocol = true
    }
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        url = "https://cursemaven.com"
    }
    maven {
        name = "squiddev"
        url = "https://squiddev.cc/maven/"
//        content {
//            includeGroup "org.squiddev"
//        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name "ModMaven"
        url "https://modmaven.dev"
    }
    mavenCentral()
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'thedarkcolour:kotlinforforge:4.10.0'
    implementation("org.joml:joml:1.10.4") { transitive = false }
    implementation("org.joml:joml-primitives:1.10.0") { transitive = false }

    implementation fg.deobf("org.valkyrienskies:valkyrienskies-120-forge:${vs2_version}") { transitive = false }
    compileOnly ("org.valkyrienskies.core:api:${vs_core_version}")
    compileOnly ("org.valkyrienskies.core:api-game:${vs_core_version}")
    compileOnly ("org.valkyrienskies.core:util:${vs_core_version}")
    compileOnly ("org.valkyrienskies.core:impl:${vs_core_version}")

//    implementation fg.deobf("net.spaceeye:valkyrien-ship-schematics-$project.minecraft_version-common:$project.vss_version") {transitive false}
//    implementation fg.deobf("net.spaceeye:valkyrien-ship-schematics-$project.minecraft_version-forge:$project.vss_version") {transitive false}
    implementation fg.deobf("com.simibubi.create:create-1.20.1:0.5.1.j-55:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.20.1:0.6.11-13")
    implementation fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.3")
    implementation fg.deobf("curse.maven:jei-238222:4644453")
//    implementation fg.deobf("curse.maven:vmod-990517:6526211")
//    implementation fg.deobf("maven.modrinth:vmod:1.6.0-forge")
//    runtimeOnly fg.deobf("maven.modrinth:architectury-api:9.2.14+forge")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    accessTransformer         : file('src/main/resources/META-INF/accesstransformer.cfg')])



    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:-deprecation'
}
kotlin {
    jvmToolchain(17)
}
shadowJar {
    // 包含所有implementation依赖
    mergeServiceFiles() // 合并服务文件，避免冲突
}
